pipeline {
  agent {
    docker {
      image 'shiv9203/docker-maven-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        checkout([
          $class: 'GitSCM',
          branches: [[name: 'main']],
          userRemoteConfigs: [[
            url: 'https://github.com/shivendra9203/CICD-App-Deploy.git',
            credentialsId: 'github'
          ]]
        ])
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://34.205.87.83:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube-tonew codeken', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "shiv9203/docker-maven-agent:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "CICD-App-Deploy"
        GIT_USER_NAME = "shivendra9203"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          script {
            checkout([
              $class: 'GitSCM',
              branches: [[name: 'main']],
              userRemoteConfigs: [[
                url: 'https://github.com/shivendra9203/CICD-App-Deploy.git',
                credentialsId: 'github'
              ]]
            ])
            sh '''
              set -e
              ls -la
              git config --global --add safe.directory /var/lib/jenkins/workspace/Auto-Deploy
              git checkout main
              git pull --ff-only
              if [ ! -f manifests-file/deployment.yml ]; then
                echo "Error: manifests-file/deployment.yml not found"
                exit 1
              fi
              git status
              git config user.email "shivendrap455@gmail.com"
              git config user.name "Shivendra Kumar Patel"
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" manifests-file/deployment.yml
              git add manifests-file/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main || { echo "Git push failed"; exit 1; }
            '''
          }
        }
      }
    }
  }
  post {
    failure {
      echo 'Pipeline failed! Check logs for details.'
    }
  }
}
